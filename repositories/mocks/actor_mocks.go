// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/actor.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	entities "crmservice/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActorInterfaceRepo is a mock of ActorInterfaceRepo interface.
type MockActorInterfaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockActorInterfaceRepoMockRecorder
}

// MockActorInterfaceRepoMockRecorder is the mock recorder for MockActorInterfaceRepo.
type MockActorInterfaceRepoMockRecorder struct {
	mock *MockActorInterfaceRepo
}

// NewMockActorInterfaceRepo creates a new mock instance.
func NewMockActorInterfaceRepo(ctrl *gomock.Controller) *MockActorInterfaceRepo {
	mock := &MockActorInterfaceRepo{ctrl: ctrl}
	mock.recorder = &MockActorInterfaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorInterfaceRepo) EXPECT() *MockActorInterfaceRepoMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorInterfaceRepo) CreateActor(actor *entities.Actor) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorInterfaceRepoMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorInterfaceRepo)(nil).CreateActor), actor)
}

// DeleteActor mocks base method.
func (m *MockActorInterfaceRepo) DeleteActor(id uint) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorInterfaceRepoMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorInterfaceRepo)(nil).DeleteActor), id)
}

// GetActorById mocks base method.
func (m *MockActorInterfaceRepo) GetActorById(id uint) (entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorById", id)
	ret0, _ := ret[0].(entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorById indicates an expected call of GetActorById.
func (mr *MockActorInterfaceRepoMockRecorder) GetActorById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorById", reflect.TypeOf((*MockActorInterfaceRepo)(nil).GetActorById), id)
}

// GetActorByUsername mocks base method.
func (m *MockActorInterfaceRepo) GetActorByUsername(username string) (entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByUsername", username)
	ret0, _ := ret[0].(entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByUsername indicates an expected call of GetActorByUsername.
func (mr *MockActorInterfaceRepoMockRecorder) GetActorByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByUsername", reflect.TypeOf((*MockActorInterfaceRepo)(nil).GetActorByUsername), username)
}

// UpdateActor mocks base method.
func (m *MockActorInterfaceRepo) UpdateActor(actor *entities.Actor) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", actor)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorInterfaceRepoMockRecorder) UpdateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorInterfaceRepo)(nil).UpdateActor), actor)
}
