// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/customer.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	entities "crmservice/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomerInterfaceRepo is a mock of CustomerInterfaceRepo interface.
type MockCustomerInterfaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerInterfaceRepoMockRecorder
}

// MockCustomerInterfaceRepoMockRecorder is the mock recorder for MockCustomerInterfaceRepo.
type MockCustomerInterfaceRepoMockRecorder struct {
	mock *MockCustomerInterfaceRepo
}

// NewMockCustomerInterfaceRepo creates a new mock instance.
func NewMockCustomerInterfaceRepo(ctrl *gomock.Controller) *MockCustomerInterfaceRepo {
	mock := &MockCustomerInterfaceRepo{ctrl: ctrl}
	mock.recorder = &MockCustomerInterfaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerInterfaceRepo) EXPECT() *MockCustomerInterfaceRepoMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerInterfaceRepo) CreateCustomer(customer *entities.Customer) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", customer)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerInterfaceRepoMockRecorder) CreateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerInterfaceRepo)(nil).CreateCustomer), customer)
}

// DeleteCustomer mocks base method.
func (m *MockCustomerInterfaceRepo) DeleteCustomer(id uint) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockCustomerInterfaceRepoMockRecorder) DeleteCustomer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockCustomerInterfaceRepo)(nil).DeleteCustomer), id)
}

// GetCustomerById mocks base method.
func (m *MockCustomerInterfaceRepo) GetCustomerById(id uint) (entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", id)
	ret0, _ := ret[0].(entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockCustomerInterfaceRepoMockRecorder) GetCustomerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockCustomerInterfaceRepo)(nil).GetCustomerById), id)
}

// UpdateCustomer mocks base method.
func (m *MockCustomerInterfaceRepo) UpdateCustomer(customer *entities.Customer) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", customer)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerInterfaceRepoMockRecorder) UpdateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerInterfaceRepo)(nil).UpdateCustomer), customer)
}
